MODULE main
VAR
  grid : array 0..3 of array 0..3 of 0..16;
  curr_max : 1..16;
  r  : 0..3;
  c  : 0..3;
INIT
  grid[0][0] = 0 & grid[0][1] = 0 & grid[0][2] = 4 & grid[0][3] = 5 &
  grid[1][0] = 0 & grid[1][1] = 1 & grid[1][2] = 0 & grid[1][3] = 0 &
  grid[2][0] = 0 & grid[2][1] = 0 & grid[2][2] = 0 & grid[2][3] = 0 &
  grid[3][0] = 2 & grid[3][1] = 0 & grid[3][2] = 0 & grid[3][3] = 3 &
  r = 1 & c = 1 & curr_max = 1;

ASSIGN
  next(curr_max) := max(curr_max, grid[r][c]);

  next(grid[0][0]) := (r = 0 & c = 0 & grid[0][0] = 0) ? curr_max : grid[0][0];
  next(grid[0][1]) := (r = 0 & c = 1 & grid[0][1] = 0) ? curr_max : grid[0][1];
  next(grid[0][2]) := (r = 0 & c = 2 & grid[0][2] = 0) ? curr_max : grid[0][2];
  next(grid[0][3]) := (r = 0 & c = 3 & grid[0][3] = 0) ? curr_max : grid[0][3];
  next(grid[1][0]) := (r = 1 & c = 0 & grid[1][0] = 0) ? curr_max : grid[1][0];
  next(grid[1][1]) := (r = 1 & c = 1 & grid[1][1] = 0) ? curr_max : grid[1][1];
  next(grid[1][2]) := (r = 1 & c = 2 & grid[1][2] = 0) ? curr_max : grid[1][2];
  next(grid[1][3]) := (r = 1 & c = 3 & grid[1][3] = 0) ? curr_max : grid[1][3];
  next(grid[2][0]) := (r = 2 & c = 0 & grid[2][0] = 0) ? curr_max : grid[2][0];
  next(grid[2][1]) := (r = 2 & c = 1 & grid[2][1] = 0) ? curr_max : grid[2][1];
  next(grid[2][2]) := (r = 2 & c = 2 & grid[2][2] = 0) ? curr_max : grid[2][2];
  next(grid[2][3]) := (r = 2 & c = 3 & grid[2][3] = 0) ? curr_max : grid[2][3];
  next(grid[3][0]) := (r = 3 & c = 0 & grid[3][0] = 0) ? curr_max : grid[3][0];
  next(grid[3][1]) := (r = 3 & c = 1 & grid[3][1] = 0) ? curr_max : grid[3][1];
  next(grid[3][2]) := (r = 3 & c = 2 & grid[3][2] = 0) ? curr_max : grid[3][2];
  next(grid[3][3]) := (r = 3 & c = 3 & grid[3][3] = 0) ? curr_max : grid[3][3];

DEFINE
  can_go_up    := r > 0 & (grid[r - 1][c] = 0 | grid[r - 1][c] = curr_max + 1);
  can_go_down  := r < 3 & (grid[r + 1][c] = 0 | grid[r + 1][c] = curr_max + 1);
  can_go_left  := c > 0 & (grid[r][c - 1] = 0 | grid[r][c - 1] = curr_max + 1);
  can_go_right := c < 3 & (grid[r][c + 1] = 0 | grid[r][c + 1] = curr_max + 1);

ASSIGN
  next(r) := {r, r - 1, r + 1};
  next(c) := {c, c - 1, c + 1};

TRANS
  next(r) = r | next(c) = c;
TRANS
  (!can_go_up    -> next(r) != r - 1) &
  (!can_go_down  -> next(r) != r + 1) &
  (!can_go_left  -> next(c) != c - 1) &
  (!can_go_right -> next(c) != c + 1);
TRANS -- loop iff the game has ended
  !(can_go_up | can_go_down | can_go_left | can_go_right) <-> (next(r) = r & next(c) = c);

LTLSPEC
 G !(curr_max = 5);
