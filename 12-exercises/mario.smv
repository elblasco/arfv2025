MODULE main
FROZENVAR
  cell : array 1..16 of boolean;
DEFINE
  GREEN := TRUE;
  SPEED := FALSE;
INIT
  cell[1]  = GREEN & cell[2]  = GREEN & cell[3]  = GREEN & cell[4]  = SPEED &
  cell[5]  = SPEED & cell[6]  = GREEN & cell[7]  = GREEN & cell[8]  = SPEED &
  cell[9]  = SPEED & cell[10] = GREEN & cell[11] = GREEN & cell[12] = GREEN &
  cell[13] = SPEED & cell[14] = GREEN & cell[15] = GREEN & cell[16] = GREEN;
VAR
  player_idx : 1..5; -- 5 means no player
  dice : 1..4;
  pos : 0..16;
DEFINE
  BEGIN := pos = 0;
  WIN := pos = 16;
  LOSE := player_idx = 5;
INIT
  player_idx = 1 & BEGIN;
TRANS
  next(dice) != dice;
ASSIGN
  next(pos) := case
    WIN | LOSE : pos;
    TRUE : min(16, pos + dice);
  esac;

  next(player_idx) := case
    next(WIN | (!BEGIN & cell[pos] = SPEED)) : player_idx;
    TRUE : min(5, player_idx + 1);
  esac;

-- Is there an execution such that the players win?
LTLSPEC
  ! F WIN;
-- Is there an execution such that the players lose?
LTLSPEC
  ! F LOSE;
-- Is there an execution such that the players win without reaching a single simple green cell?
LTLSPEC
  ! ((F WIN) & (G (BEGIN | WIN | cell[pos] != GREEN)))
