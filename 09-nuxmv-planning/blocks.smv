-- A simple planning problem. Move the blocks from the initial configuration
-- (on the left) to the final one (on the right):
--
--    +---+        +---+
--    | A |        | C |
--    +---+        +---+
--    | B |  --->  | B |
--    +---+        +---+
--    | C |        | A |
-- ___|___|________|___|___
-- :::::::::: T :::::::::::
--

MODULE block(id, ab, bl)
VAR
  above : {none, a, b, c};
  below : {none, a, b, c};
DEFINE
  clear := (above = none);
INIT
  above = ab & below = bl;
INVAR
  below != id & above != id;

MODULE main
VAR
  block_a : block(a, none, b);
  block_b : block(b, a, c);
  block_c : block(c, b, none);
  move    : {move_a, move_b, move_c};
INVAR -- symmetry of above/below relation
  (block_a.above = b <-> block_b.below = a) &
  (block_a.above = c <-> block_c.below = a) &
  (block_b.above = a <-> block_a.below = b) &
  (block_b.above = c <-> block_c.below = b) &
  (block_c.above = a <-> block_a.below = c) &
  (block_c.above = b <-> block_b.below = c);
INVAR -- only clear blocks can be moved
  (!block_a.clear -> move != move_a) &
  (!block_b.clear -> move != move_b) &
  (!block_c.clear -> move != move_c);
TRANS -- a moving block changes location and remains clear
  (move = move_a -> next(block_a.clear) & next(block_a.below) != block_a.below) &
  (move = move_b -> next(block_b.clear) & next(block_b.below) != block_b.below) &
  (move = move_c -> next(block_c.clear) & next(block_c.below) != block_c.below);
TRANS -- a non-moving block does not change its location
  (move != move_a -> next(block_a.below) = block_a.below) &
  (move != move_b -> next(block_b.below) = block_b.below) &
  (move != move_c -> next(block_c.below) = block_c.below);
TRANS -- a block remains connected to any non-moving block
  (move != move_a & block_b.above = a -> next(block_b.above) = a) &
  (move != move_a & block_c.above = a -> next(block_c.above) = a) &
  (move != move_b & block_a.above = b -> next(block_a.above) = b) &
  (move != move_b & block_c.above = b -> next(block_c.above) = b) &
  (move != move_c & block_a.above = c -> next(block_a.above) = c) &
  (move != move_c & block_b.above = c -> next(block_b.above) = c);
LTLSPEC -- get a plan for reaching a goal state
  ! F (block_a.below = none & block_b.below = a & block_c.below = b);
LTLSPEC -- get a plan for reaching a configuration where all the blocks are on the table
  ! F (block_a.below = none & block_b.below = none & block_c.below = none);
INVARSPEC -- at any given time, at least one block is placed on the table
  block_a.below = none | block_b.below = none | block_c.below = none;
INVARSPEC -- at any given time, at least one block has nothing above
  block_a.clear | block_b.clear | block_c.clear;

